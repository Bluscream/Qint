







// *** DO NOT EDIT THIS FILE, IT HAS BEEN AUTO-GENERATED ***

using System;
using System.Runtime.InteropServices;
using u8 = System.Byte;
using u16 = System.UInt16;
using u32 = System.UInt32;
using u64 = System.UInt64;
using i8 = System.SByte;
using i16 = System.Int16;
using i32 = System.Int32;
using i64 = System.Int64;
using f32 = System.Single;
using f64 = System.Double;
using str = System.String;

using ServerId = System.UInt64;
using ConnectionId = System.UInt64;
using ClientUid = System.String;
using ClientDbId = System.UInt64;
using ClientId = System.UInt16;
using ChannelId = System.UInt64;
using ServerGroupId = System.UInt64;
using ChannelGroupId = System.UInt64;
using TimeSpanSeconds = System.TimeSpan;
using TimeSpanMillisec = System.TimeSpan;

#pragma warning disable IDE1006

namespace WrapperCore.Dto
{
	public sealed class ClientNetwork
	{
		[DllImport("tslib")] private static extern f32 get_client_network_ping();
		[DllImport("tslib")] private static extern f32 set_client_network_ping(f32 Ping);
		public f32 Ping { get => get_client_network_ping(); set => set_client_network_ping(value); }
	}

	///<summary>lalala</summary>
	public sealed class Client
	{
		public Client(ConnectionId ConnectionId, ClientId ClientId)
		{
			this.ConnectionId = this.ConnectionId;
			this.ClientId = this.ClientId;
		}
		public ConnectionId ConnectionId { get; }
		///<summary>Id to iderntify a connected user</summary>
		public ClientId ClientId { get; }

		[DllImport("tslib")] private static extern str get_client_welcome_message(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern str set_client_welcome_message(ConnectionId ConnectionId, ClientId ClientId, str WelcomeMessage);
		///<summary>Welcome message when conecting to a server.</summary>
		public str WelcomeMessage { get => get_client_welcome_message(ConnectionId, ClientId); set => set_client_welcome_message(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_max_clients(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_max_clients(ConnectionId ConnectionId, ClientId ClientId, u32 MaxClients);
		public u32 MaxClients { get => get_client_max_clients(ConnectionId, ClientId); set => set_client_max_clients(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_clients_online(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_clients_online(ConnectionId ConnectionId, ClientId ClientId, u32 ClientsOnline);
		public u32 ClientsOnline { get => get_client_clients_online(ConnectionId, ClientId); set => set_client_clients_online(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_channels_online(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_channels_online(ConnectionId ConnectionId, ClientId ClientId, u32 ChannelsOnline);
		public u32 ChannelsOnline { get => get_client_channels_online(ConnectionId, ClientId); set => set_client_channels_online(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_client_connections(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_client_connections(ConnectionId ConnectionId, ClientId ClientId, u32 ClientConnections);
		public u32 ClientConnections { get => get_client_client_connections(ConnectionId, ClientId); set => set_client_client_connections(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_query_client_connections(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_query_client_connections(ConnectionId ConnectionId, ClientId ClientId, u32 QueryClientConnections);
		public u32 QueryClientConnections { get => get_client_query_client_connections(ConnectionId, ClientId); set => set_client_query_client_connections(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_query_clients_online(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_query_clients_online(ConnectionId ConnectionId, ClientId ClientId, u32 QueryClientsOnline);
		public u32 QueryClientsOnline { get => get_client_query_clients_online(ConnectionId, ClientId); set => set_client_query_clients_online(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern TimeSpan get_client_uptime(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern TimeSpan set_client_uptime(ConnectionId ConnectionId, ClientId ClientId, TimeSpan Uptime);
		public TimeSpan Uptime { get => get_client_uptime(ConnectionId, ClientId); set => set_client_uptime(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_password(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_password(ConnectionId ConnectionId, ClientId ClientId, bool Password);
		public bool Password { get => get_client_password(ConnectionId, ClientId); set => set_client_password(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_max_download_total_bandwith(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_max_download_total_bandwith(ConnectionId ConnectionId, ClientId ClientId, u32 MaxDownloadTotalBandwith);
		public u32 MaxDownloadTotalBandwith { get => get_client_max_download_total_bandwith(ConnectionId, ClientId); set => set_client_max_download_total_bandwith(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_max_upload_total_bandwith(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_max_upload_total_bandwith(ConnectionId ConnectionId, ClientId ClientId, u32 MaxUploadTotalBandwith);
		public u32 MaxUploadTotalBandwith { get => get_client_max_upload_total_bandwith(ConnectionId, ClientId); set => set_client_max_upload_total_bandwith(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_download_quota(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_download_quota(ConnectionId ConnectionId, ClientId ClientId, u32 DownloadQuota);
		public u32 DownloadQuota { get => get_client_download_quota(ConnectionId, ClientId); set => set_client_download_quota(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_upload_quota(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_upload_quota(ConnectionId ConnectionId, ClientId ClientId, u32 UploadQuota);
		public u32 UploadQuota { get => get_client_upload_quota(ConnectionId, ClientId); set => set_client_upload_quota(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_month_bytes_downloaded(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_month_bytes_downloaded(ConnectionId ConnectionId, ClientId ClientId, u32 MonthBytesDownloaded);
		public u32 MonthBytesDownloaded { get => get_client_month_bytes_downloaded(ConnectionId, ClientId); set => set_client_month_bytes_downloaded(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_month_bytes_uploaded(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_month_bytes_uploaded(ConnectionId ConnectionId, ClientId ClientId, u32 MonthBytesUploaded);
		public u32 MonthBytesUploaded { get => get_client_month_bytes_uploaded(ConnectionId, ClientId); set => set_client_month_bytes_uploaded(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_total_bytes_downloaded(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_total_bytes_downloaded(ConnectionId ConnectionId, ClientId ClientId, u32 TotalBytesDownloaded);
		public u32 TotalBytesDownloaded { get => get_client_total_bytes_downloaded(ConnectionId, ClientId); set => set_client_total_bytes_downloaded(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_total_bytes_uploaded(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_total_bytes_uploaded(ConnectionId ConnectionId, ClientId ClientId, u32 TotalBytesUploaded);
		public u32 TotalBytesUploaded { get => get_client_total_bytes_uploaded(ConnectionId, ClientId); set => set_client_total_bytes_uploaded(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_complain_autoban_count(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_complain_autoban_count(ConnectionId ConnectionId, ClientId ClientId, u32 ComplainAutobanCount);
		public u32 ComplainAutobanCount { get => get_client_complain_autoban_count(ConnectionId, ClientId); set => set_client_complain_autoban_count(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern TimeSpan get_client_complain_autoban_time(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern TimeSpan set_client_complain_autoban_time(ConnectionId ConnectionId, ClientId ClientId, TimeSpan ComplainAutobanTime);
		public TimeSpan ComplainAutobanTime { get => get_client_complain_autoban_time(ConnectionId, ClientId); set => set_client_complain_autoban_time(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern TimeSpan get_client_complain_remove_time(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern TimeSpan set_client_complain_remove_time(ConnectionId ConnectionId, ClientId ClientId, TimeSpan ComplainRemoveTime);
		public TimeSpan ComplainRemoveTime { get => get_client_complain_remove_time(ConnectionId, ClientId); set => set_client_complain_remove_time(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_min_clients_in_channel_before_forced_silence(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_min_clients_in_channel_before_forced_silence(ConnectionId ConnectionId, ClientId ClientId, u32 MinClientsInChannelBeforeForcedSilence);
		public u32 MinClientsInChannelBeforeForcedSilence { get => get_client_min_clients_in_channel_before_forced_silence(ConnectionId, ClientId); set => set_client_min_clients_in_channel_before_forced_silence(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_antiflood_points_tick_reduce(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_antiflood_points_tick_reduce(ConnectionId ConnectionId, ClientId ClientId, u32 AntifloodPointsTickReduce);
		public u32 AntifloodPointsTickReduce { get => get_client_antiflood_points_tick_reduce(ConnectionId, ClientId); set => set_client_antiflood_points_tick_reduce(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_antiflood_points_needed_command_block(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_antiflood_points_needed_command_block(ConnectionId ConnectionId, ClientId ClientId, u32 AntifloodPointsNeededCommandBlock);
		public u32 AntifloodPointsNeededCommandBlock { get => get_client_antiflood_points_needed_command_block(ConnectionId, ClientId); set => set_client_antiflood_points_needed_command_block(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_antiflood_points_needed_ip_block(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_antiflood_points_needed_ip_block(ConnectionId ConnectionId, ClientId ClientId, u32 AntifloodPointsNeededIpBlock);
		public u32 AntifloodPointsNeededIpBlock { get => get_client_antiflood_points_needed_ip_block(ConnectionId, ClientId); set => set_client_antiflood_points_needed_ip_block(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u16 get_client_port(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u16 set_client_port(ConnectionId ConnectionId, ClientId ClientId, u16 Port);
		public u16 Port { get => get_client_port(ConnectionId, ClientId); set => set_client_port(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_autostart(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_autostart(ConnectionId ConnectionId, ClientId ClientId, bool Autostart);
		public bool Autostart { get => get_client_autostart(ConnectionId, ClientId); set => set_client_autostart(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_machine_id(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_machine_id(ConnectionId ConnectionId, ClientId ClientId, u32 MachineId);
		public u32 MachineId { get => get_client_machine_id(ConnectionId, ClientId); set => set_client_machine_id(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_needed_identity_security_level(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_needed_identity_security_level(ConnectionId ConnectionId, ClientId ClientId, u32 NeededIdentitySecurityLevel);
		public u32 NeededIdentitySecurityLevel { get => get_client_needed_identity_security_level(ConnectionId, ClientId); set => set_client_needed_identity_security_level(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_log_client(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_log_client(ConnectionId ConnectionId, ClientId ClientId, bool LogClient);
		public bool LogClient { get => get_client_log_client(ConnectionId, ClientId); set => set_client_log_client(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_log_query(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_log_query(ConnectionId ConnectionId, ClientId ClientId, bool LogQuery);
		public bool LogQuery { get => get_client_log_query(ConnectionId, ClientId); set => set_client_log_query(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_log_channel(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_log_channel(ConnectionId ConnectionId, ClientId ClientId, bool LogChannel);
		public bool LogChannel { get => get_client_log_channel(ConnectionId, ClientId); set => set_client_log_channel(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_log_permissions(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_log_permissions(ConnectionId ConnectionId, ClientId ClientId, bool LogPermissions);
		public bool LogPermissions { get => get_client_log_permissions(ConnectionId, ClientId); set => set_client_log_permissions(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_log_server(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_log_server(ConnectionId ConnectionId, ClientId ClientId, bool LogServer);
		public bool LogServer { get => get_client_log_server(ConnectionId, ClientId); set => set_client_log_server(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_log_filetransfer(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_log_filetransfer(ConnectionId ConnectionId, ClientId ClientId, bool LogFiletransfer);
		public bool LogFiletransfer { get => get_client_log_filetransfer(ConnectionId, ClientId); set => set_client_log_filetransfer(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern str get_client_min_client_version(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern str set_client_min_client_version(ConnectionId ConnectionId, ClientId ClientId, str MinClientVersion);
		public str MinClientVersion { get => get_client_min_client_version(ConnectionId, ClientId); set => set_client_min_client_version(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_total_packetloss_speech(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_total_packetloss_speech(ConnectionId ConnectionId, ClientId ClientId, u32 TotalPacketlossSpeech);
		public u32 TotalPacketlossSpeech { get => get_client_total_packetloss_speech(ConnectionId, ClientId); set => set_client_total_packetloss_speech(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_total_packetloss_keepalive(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_total_packetloss_keepalive(ConnectionId ConnectionId, ClientId ClientId, u32 TotalPacketlossKeepalive);
		public u32 TotalPacketlossKeepalive { get => get_client_total_packetloss_keepalive(ConnectionId, ClientId); set => set_client_total_packetloss_keepalive(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_total_packetloss_control(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_total_packetloss_control(ConnectionId ConnectionId, ClientId ClientId, u32 TotalPacketlossControl);
		public u32 TotalPacketlossControl { get => get_client_total_packetloss_control(ConnectionId, ClientId); set => set_client_total_packetloss_control(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_total_packetloss_total(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_total_packetloss_total(ConnectionId ConnectionId, ClientId ClientId, u32 TotalPacketlossTotal);
		public u32 TotalPacketlossTotal { get => get_client_total_packetloss_total(ConnectionId, ClientId); set => set_client_total_packetloss_total(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern u32 get_client_total_ping(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern u32 set_client_total_ping(ConnectionId ConnectionId, ClientId ClientId, u32 TotalPing);
		public u32 TotalPing { get => get_client_total_ping(ConnectionId, ClientId); set => set_client_total_ping(ConnectionId, ClientId, value); }
		[DllImport("tslib")] private static extern bool get_client_weblist_enabled(ConnectionId ConnectionId, ClientId ClientId);
		[DllImport("tslib")] private static extern bool set_client_weblist_enabled(ConnectionId ConnectionId, ClientId ClientId, bool WeblistEnabled);
		public bool WeblistEnabled { get => get_client_weblist_enabled(ConnectionId, ClientId); set => set_client_weblist_enabled(ConnectionId, ClientId, value); }
	}

	public sealed class OutdatedServerData
	{
		[DllImport("tslib")] private static extern str get_outdated_server_data_hostmessage();
		[DllImport("tslib")] private static extern str set_outdated_server_data_hostmessage(str hostmessage);
		public str hostmessage { get => get_outdated_server_data_hostmessage(); set => set_outdated_server_data_hostmessage(value); }
		[DllImport("tslib")] private static extern HostMessageMode get_outdated_server_data_hostmessage_mode();
		[DllImport("tslib")] private static extern HostMessageMode set_outdated_server_data_hostmessage_mode(HostMessageMode hostmessage_mode);
		public HostMessageMode hostmessage_mode { get => get_outdated_server_data_hostmessage_mode(); set => set_outdated_server_data_hostmessage_mode(value); }
	}

	public sealed class Server
	{
		[DllImport("tslib")] private static extern ServerId get_server_id();
		[DllImport("tslib")] private static extern ServerId set_server_id(ServerId Id);
		public ServerId Id { get => get_server_id(); set => set_server_id(value); }
		[DllImport("tslib")] private static extern str get_server_uid();
		[DllImport("tslib")] private static extern str set_server_uid(str Uid);
		///<summary>UniqueIdentifier</summary>
		public str Uid { get => get_server_uid(); set => set_server_uid(value); }
		[DllImport("tslib")] private static extern ConnectionId get_server_own_connection_id();
		[DllImport("tslib")] private static extern ConnectionId set_server_own_connection_id(ConnectionId OwnConnectionId);
		public ConnectionId OwnConnectionId { get => get_server_own_connection_id(); set => set_server_own_connection_id(value); }
		[DllImport("tslib")] private static extern str get_server_name();
		[DllImport("tslib")] private static extern str set_server_name(str Name);
		public str Name { get => get_server_name(); set => set_server_name(value); }
		[DllImport("tslib")] private static extern str get_server_phonetic_name();
		[DllImport("tslib")] private static extern str set_server_phonetic_name(str PhoneticName);
		public str PhoneticName { get => get_server_phonetic_name(); set => set_server_phonetic_name(value); }
		[DllImport("tslib")] private static extern str get_server_platform();
		[DllImport("tslib")] private static extern str set_server_platform(str Platform);
		public str Platform { get => get_server_platform(); set => set_server_platform(value); }
		[DllImport("tslib")] private static extern str get_server_version();
		[DllImport("tslib")] private static extern str set_server_version(str Version);
		public str Version { get => get_server_version(); set => set_server_version(value); }
		[DllImport("tslib")] private static extern DateTime get_server_created();
		[DllImport("tslib")] private static extern DateTime set_server_created(DateTime Created);
		///<summary>???</summary>
		public DateTime Created { get => get_server_created(); set => set_server_created(value); }
		[DllImport("tslib")] private static extern CodecEncryptionMode get_server_codec_encryption_mode();
		[DllImport("tslib")] private static extern CodecEncryptionMode set_server_codec_encryption_mode(CodecEncryptionMode CodecEncryptionMode);
		public CodecEncryptionMode CodecEncryptionMode { get => get_server_codec_encryption_mode(); set => set_server_codec_encryption_mode(value); }
		[DllImport("tslib")] private static extern ServerGroupId get_server_default_server_group();
		[DllImport("tslib")] private static extern ServerGroupId set_server_default_server_group(ServerGroupId DefaultServerGroup);
		///<summary>???</summary>
		public ServerGroupId DefaultServerGroup { get => get_server_default_server_group(); set => set_server_default_server_group(value); }
		[DllImport("tslib")] private static extern ChannelGroupId get_server_default_channel_group();
		[DllImport("tslib")] private static extern ChannelGroupId set_server_default_channel_group(ChannelGroupId DefaultChannelGroup);
		///<summary>???</summary>
		public ChannelGroupId DefaultChannelGroup { get => get_server_default_channel_group(); set => set_server_default_channel_group(value); }
		[DllImport("tslib")] private static extern ChannelGroupId get_server_default_channel_admin_group();
		[DllImport("tslib")] private static extern ChannelGroupId set_server_default_channel_admin_group(ChannelGroupId DefaultChannelAdminGroup);
		///<summary>???</summary>
		public ChannelGroupId DefaultChannelAdminGroup { get => get_server_default_channel_admin_group(); set => set_server_default_channel_admin_group(value); }
		[DllImport("tslib")] private static extern str get_server_hostbanner_url();
		[DllImport("tslib")] private static extern str set_server_hostbanner_url(str HostbannerUrl);
		public str HostbannerUrl { get => get_server_hostbanner_url(); set => set_server_hostbanner_url(value); }
		[DllImport("tslib")] private static extern str get_server_hostbanner_gfx_url();
		[DllImport("tslib")] private static extern str set_server_hostbanner_gfx_url(str HostbannerGfxUrl);
		public str HostbannerGfxUrl { get => get_server_hostbanner_gfx_url(); set => set_server_hostbanner_gfx_url(value); }
		[DllImport("tslib")] private static extern TimeSpan get_server_hostbanner_gfx_interval();
		[DllImport("tslib")] private static extern TimeSpan set_server_hostbanner_gfx_interval(TimeSpan HostbannerGfxInterval);
		public TimeSpan HostbannerGfxInterval { get => get_server_hostbanner_gfx_interval(); set => set_server_hostbanner_gfx_interval(value); }
		[DllImport("tslib")] private static extern HostBannerMode get_server_hostbanner_mode();
		[DllImport("tslib")] private static extern HostBannerMode set_server_hostbanner_mode(HostBannerMode HostbannerMode);
		public HostBannerMode HostbannerMode { get => get_server_hostbanner_mode(); set => set_server_hostbanner_mode(value); }
		[DllImport("tslib")] private static extern i32 get_server_priority_speaker_dimm_modificator();
		[DllImport("tslib")] private static extern i32 set_server_priority_speaker_dimm_modificator(i32 PrioritySpeakerDimmModificator);
		public i32 PrioritySpeakerDimmModificator { get => get_server_priority_speaker_dimm_modificator(); set => set_server_priority_speaker_dimm_modificator(value); }
		[DllImport("tslib")] private static extern str get_server_hostbutton_tooltip();
		[DllImport("tslib")] private static extern str set_server_hostbutton_tooltip(str HostbuttonTooltip);
		public str HostbuttonTooltip { get => get_server_hostbutton_tooltip(); set => set_server_hostbutton_tooltip(value); }
		[DllImport("tslib")] private static extern str get_server_hostbutton_url();
		[DllImport("tslib")] private static extern str set_server_hostbutton_url(str HostbuttonUrl);
		public str HostbuttonUrl { get => get_server_hostbutton_url(); set => set_server_hostbutton_url(value); }
		[DllImport("tslib")] private static extern str get_server_hostbutton_gfx_url();
		[DllImport("tslib")] private static extern str set_server_hostbutton_gfx_url(str HostbuttonGfxUrl);
		public str HostbuttonGfxUrl { get => get_server_hostbutton_gfx_url(); set => set_server_hostbutton_gfx_url(value); }
		[DllImport("tslib")] private static extern i32 get_server_icon_id();
		[DllImport("tslib")] private static extern i32 set_server_icon_id(i32 IconId);
		public i32 IconId { get => get_server_icon_id(); set => set_server_icon_id(value); }
		[DllImport("tslib")] private static extern i32 get_server_reserved_slots();
		[DllImport("tslib")] private static extern i32 set_server_reserved_slots(i32 ReservedSlots);
		public i32 ReservedSlots { get => get_server_reserved_slots(); set => set_server_reserved_slots(value); }
		[DllImport("tslib")] private static extern bool get_server_ask_for_privilegekey();
		[DllImport("tslib")] private static extern bool set_server_ask_for_privilegekey(bool AskForPrivilegekey);
		public bool AskForPrivilegekey { get => get_server_ask_for_privilegekey(); set => set_server_ask_for_privilegekey(value); }
		[DllImport("tslib")] private static extern TimeSpan get_server_channel_temp_delete_delay_default();
		[DllImport("tslib")] private static extern TimeSpan set_server_channel_temp_delete_delay_default(TimeSpan ChannelTempDeleteDelayDefault);
		public TimeSpan ChannelTempDeleteDelayDefault { get => get_server_channel_temp_delete_delay_default(); set => set_server_channel_temp_delete_delay_default(value); }
	}

	public sealed class OptionalChannelData
	{
		[DllImport("tslib")] private static extern ChannelId get_optional_channel_data_channel_id();
		[DllImport("tslib")] private static extern ChannelId set_optional_channel_data_channel_id(ChannelId ChannelId);
		///<summary>result(false)</summary>
		public ChannelId ChannelId { get => get_optional_channel_data_channel_id(); set => set_optional_channel_data_channel_id(value); }
		[DllImport("tslib")] private static extern ServerId get_optional_channel_data_server_id();
		[DllImport("tslib")] private static extern ServerId set_optional_channel_data_server_id(ServerId ServerId);
		///<summary>result(false)</summary>
		public ServerId ServerId { get => get_optional_channel_data_server_id(); set => set_optional_channel_data_server_id(value); }
		[DllImport("tslib")] private static extern str get_optional_channel_data_description();
		[DllImport("tslib")] private static extern str set_optional_channel_data_description(str Description);
		public str Description { get => get_optional_channel_data_description(); set => set_optional_channel_data_description(value); }
	}

	public sealed class Channel
	{
		[DllImport("tslib")] private static extern ChannelId get_channel_id();
		[DllImport("tslib")] private static extern ChannelId set_channel_id(ChannelId Id);
		public ChannelId Id { get => get_channel_id(); set => set_channel_id(value); }
		[DllImport("tslib")] private static extern ServerId get_channel_server_id();
		[DllImport("tslib")] private static extern ServerId set_channel_server_id(ServerId ServerId);
		public ServerId ServerId { get => get_channel_server_id(); set => set_channel_server_id(value); }
		[DllImport("tslib")] private static extern ChannelId get_channel_parent_channel_id();
		[DllImport("tslib")] private static extern ChannelId set_channel_parent_channel_id(ChannelId ParentChannelId);
		public ChannelId ParentChannelId { get => get_channel_parent_channel_id(); set => set_channel_parent_channel_id(value); }
		[DllImport("tslib")] private static extern str get_channel_name();
		[DllImport("tslib")] private static extern str set_channel_name(str Name);
		public str Name { get => get_channel_name(); set => set_channel_name(value); }
		[DllImport("tslib")] private static extern str get_channel_topic();
		[DllImport("tslib")] private static extern str set_channel_topic(str Topic);
		public str Topic { get => get_channel_topic(); set => set_channel_topic(value); }
		[DllImport("tslib")] private static extern Codec get_channel_codec();
		[DllImport("tslib")] private static extern Codec set_channel_codec(Codec Codec);
		public Codec Codec { get => get_channel_codec(); set => set_channel_codec(value); }
		[DllImport("tslib")] private static extern i32 get_channel_codec_quality();
		[DllImport("tslib")] private static extern i32 set_channel_codec_quality(i32 CodecQuality);
		public i32 CodecQuality { get => get_channel_codec_quality(); set => set_channel_codec_quality(value); }
		[DllImport("tslib")] private static extern i32 get_channel_max_clients();
		[DllImport("tslib")] private static extern i32 set_channel_max_clients(i32 MaxClients);
		public i32 MaxClients { get => get_channel_max_clients(); set => set_channel_max_clients(value); }
		[DllImport("tslib")] private static extern i32 get_channel_max_family_clients();
		[DllImport("tslib")] private static extern i32 set_channel_max_family_clients(i32 MaxFamilyClients);
		public i32 MaxFamilyClients { get => get_channel_max_family_clients(); set => set_channel_max_family_clients(value); }
		[DllImport("tslib")] private static extern i32 get_channel_order();
		[DllImport("tslib")] private static extern i32 set_channel_order(i32 Order);
		public i32 Order { get => get_channel_order(); set => set_channel_order(value); }
		[DllImport("tslib")] private static extern bool get_channel_permanent();
		[DllImport("tslib")] private static extern bool set_channel_permanent(bool Permanent);
		///<summary>FlagPermanent</summary>
		public bool Permanent { get => get_channel_permanent(); set => set_channel_permanent(value); }
		[DllImport("tslib")] private static extern bool get_channel_semi_permanent();
		[DllImport("tslib")] private static extern bool set_channel_semi_permanent(bool SemiPermanent);
		///<summary>FlagSemiPermanent</summary>
		public bool SemiPermanent { get => get_channel_semi_permanent(); set => set_channel_semi_permanent(value); }
		[DllImport("tslib")] private static extern bool get_channel_default();
		[DllImport("tslib")] private static extern bool set_channel_default(bool Default);
		///<summary>FlagDefault</summary>
		public bool Default { get => get_channel_default(); set => set_channel_default(value); }
		[DllImport("tslib")] private static extern bool get_channel_password();
		[DllImport("tslib")] private static extern bool set_channel_password(bool Password);
		///<summary>FlagPassword</summary>
		public bool Password { get => get_channel_password(); set => set_channel_password(value); }
		[DllImport("tslib")] private static extern i32 get_channel_codec_latency_factor();
		[DllImport("tslib")] private static extern i32 set_channel_codec_latency_factor(i32 CodecLatencyFactor);
		public i32 CodecLatencyFactor { get => get_channel_codec_latency_factor(); set => set_channel_codec_latency_factor(value); }
		[DllImport("tslib")] private static extern bool get_channel_codec_is_unencrypted();
		[DllImport("tslib")] private static extern bool set_channel_codec_is_unencrypted(bool CodecIsUnencrypted);
		public bool CodecIsUnencrypted { get => get_channel_codec_is_unencrypted(); set => set_channel_codec_is_unencrypted(value); }
		[DllImport("tslib")] private static extern i32 get_channel_delete_delay();
		[DllImport("tslib")] private static extern i32 set_channel_delete_delay(i32 DeleteDelay);
		public i32 DeleteDelay { get => get_channel_delete_delay(); set => set_channel_delete_delay(value); }
		[DllImport("tslib")] private static extern bool get_channel_max_clients_unlimited();
		[DllImport("tslib")] private static extern bool set_channel_max_clients_unlimited(bool MaxClientsUnlimited);
		///<summary>FlagMaxClientsUnlimited</summary>
		public bool MaxClientsUnlimited { get => get_channel_max_clients_unlimited(); set => set_channel_max_clients_unlimited(value); }
		[DllImport("tslib")] private static extern bool get_channel_max_family_clients_unlimited();
		[DllImport("tslib")] private static extern bool set_channel_max_family_clients_unlimited(bool MaxFamilyClientsUnlimited);
		///<summary>FlagMaxFamilyClientsUnlimited</summary>
		public bool MaxFamilyClientsUnlimited { get => get_channel_max_family_clients_unlimited(); set => set_channel_max_family_clients_unlimited(value); }
		[DllImport("tslib")] private static extern bool get_channel_subscribed();
		[DllImport("tslib")] private static extern bool set_channel_subscribed(bool Subscribed);
		///<summary>FlagAreSubscribed</summary>
		public bool Subscribed { get => get_channel_subscribed(); set => set_channel_subscribed(value); }
		[DllImport("tslib")] private static extern i32 get_channel_needed_talk_power();
		[DllImport("tslib")] private static extern i32 set_channel_needed_talk_power(i32 NeededTalkPower);
		public i32 NeededTalkPower { get => get_channel_needed_talk_power(); set => set_channel_needed_talk_power(value); }
		[DllImport("tslib")] private static extern i32 get_channel_forced_silence();
		[DllImport("tslib")] private static extern i32 set_channel_forced_silence(i32 ForcedSilence);
		public i32 ForcedSilence { get => get_channel_forced_silence(); set => set_channel_forced_silence(value); }
		[DllImport("tslib")] private static extern str get_channel_phonetic_name();
		[DllImport("tslib")] private static extern str set_channel_phonetic_name(str PhoneticName);
		public str PhoneticName { get => get_channel_phonetic_name(); set => set_channel_phonetic_name(value); }
		[DllImport("tslib")] private static extern i32 get_channel_icon_id();
		[DllImport("tslib")] private static extern i32 set_channel_icon_id(i32 IconId);
		public i32 IconId { get => get_channel_icon_id(); set => set_channel_icon_id(value); }
		[DllImport("tslib")] private static extern bool get_channel_private();
		[DllImport("tslib")] private static extern bool set_channel_private(bool Private);
		///<summary>FlagPrivate</summary>
		public bool Private { get => get_channel_private(); set => set_channel_private(value); }
	}

	public sealed class OwnConnectionData
	{
		[DllImport("tslib")] private static extern str get_own_connection_data_server_ip();
		[DllImport("tslib")] private static extern str set_own_connection_data_server_ip(str ServerIp);
		public str ServerIp { get => get_own_connection_data_server_ip(); set => set_own_connection_data_server_ip(value); }
		[DllImport("tslib")] private static extern u16 get_own_connection_data_server_port();
		[DllImport("tslib")] private static extern u16 set_own_connection_data_server_port(u16 ServerPort);
		public u16 ServerPort { get => get_own_connection_data_server_port(); set => set_own_connection_data_server_port(value); }
		[DllImport("tslib")] private static extern bool get_own_connection_data_input_deactivated();
		[DllImport("tslib")] private static extern bool set_own_connection_data_input_deactivated(bool InputDeactivated);
		///<summary>InputDeactivationStatus???</summary>
		public bool InputDeactivated { get => get_own_connection_data_input_deactivated(); set => set_own_connection_data_input_deactivated(value); }
		[DllImport("tslib")] private static extern ChannelId get_own_connection_data_default_channel();
		[DllImport("tslib")] private static extern ChannelId set_own_connection_data_default_channel(ChannelId DefaultChannel);
		public ChannelId DefaultChannel { get => get_own_connection_data_default_channel(); set => set_own_connection_data_default_channel(value); }
		[DllImport("tslib")] private static extern str get_own_connection_data_default_token();
		[DllImport("tslib")] private static extern str set_own_connection_data_default_token(str DefaultToken);
		public str DefaultToken { get => get_own_connection_data_default_token(); set => set_own_connection_data_default_token(value); }
	}

	public sealed class ServerqueryConnectionData
	{
		[DllImport("tslib")] private static extern str get_serverquery_connection_data_name();
		[DllImport("tslib")] private static extern str set_serverquery_connection_data_name(str Name);
		public str Name { get => get_serverquery_connection_data_name(); set => set_serverquery_connection_data_name(value); }
		[DllImport("tslib")] private static extern str get_serverquery_connection_data_password();
		[DllImport("tslib")] private static extern str set_serverquery_connection_data_password(str Password);
		public str Password { get => get_serverquery_connection_data_password(); set => set_serverquery_connection_data_password(value); }
	}

	public sealed class OptionalConnectionData
	{
		[DllImport("tslib")] private static extern ConnectionId get_optional_connection_data_id();
		[DllImport("tslib")] private static extern ConnectionId set_optional_connection_data_id(ConnectionId Id);
		public ConnectionId Id { get => get_optional_connection_data_id(); set => set_optional_connection_data_id(value); }
		[DllImport("tslib")] private static extern ServerId get_optional_connection_data_server_id();
		[DllImport("tslib")] private static extern ServerId set_optional_connection_data_server_id(ServerId ServerId);
		public ServerId ServerId { get => get_optional_connection_data_server_id(); set => set_optional_connection_data_server_id(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_version();
		[DllImport("tslib")] private static extern str set_optional_connection_data_version(str Version);
		public str Version { get => get_optional_connection_data_version(); set => set_optional_connection_data_version(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_platform();
		[DllImport("tslib")] private static extern str set_optional_connection_data_platform(str Platform);
		public str Platform { get => get_optional_connection_data_platform(); set => set_optional_connection_data_platform(value); }
		[DllImport("tslib")] private static extern DateTime get_optional_connection_data_created();
		[DllImport("tslib")] private static extern DateTime set_optional_connection_data_created(DateTime Created);
		///<summary>???</summary>
		public DateTime Created { get => get_optional_connection_data_created(); set => set_optional_connection_data_created(value); }
		[DllImport("tslib")] private static extern DateTime get_optional_connection_data_last_connected();
		[DllImport("tslib")] private static extern DateTime set_optional_connection_data_last_connected(DateTime LastConnected);
		///<summary>???</summary>
		public DateTime LastConnected { get => get_optional_connection_data_last_connected(); set => set_optional_connection_data_last_connected(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_total_connection();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_total_connection(i32 TotalConnection);
		public i32 TotalConnection { get => get_optional_connection_data_total_connection(); set => set_optional_connection_data_total_connection(value); }
		[DllImport("tslib")] private static extern float get_optional_connection_data_ping();
		[DllImport("tslib")] private static extern float set_optional_connection_data_ping(float Ping);
		public float Ping { get => get_optional_connection_data_ping(); set => set_optional_connection_data_ping(value); }
		[DllImport("tslib")] private static extern float get_optional_connection_data_ping_deviation();
		[DllImport("tslib")] private static extern float set_optional_connection_data_ping_deviation(float PingDeviation);
		public float PingDeviation { get => get_optional_connection_data_ping_deviation(); set => set_optional_connection_data_ping_deviation(value); }
		[DllImport("tslib")] private static extern TimeSpan get_optional_connection_data_connected_time();
		[DllImport("tslib")] private static extern TimeSpan set_optional_connection_data_connected_time(TimeSpan ConnectedTime);
		public TimeSpan ConnectedTime { get => get_optional_connection_data_connected_time(); set => set_optional_connection_data_connected_time(value); }
		[DllImport("tslib")] private static extern TimeSpan get_optional_connection_data_idle_time();
		[DllImport("tslib")] private static extern TimeSpan set_optional_connection_data_idle_time(TimeSpan IdleTime);
		public TimeSpan IdleTime { get => get_optional_connection_data_idle_time(); set => set_optional_connection_data_idle_time(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_client_ip();
		[DllImport("tslib")] private static extern str set_optional_connection_data_client_ip(str ClientIp);
		public str ClientIp { get => get_optional_connection_data_client_ip(); set => set_optional_connection_data_client_ip(value); }
		[DllImport("tslib")] private static extern u16 get_optional_connection_data_client_port();
		[DllImport("tslib")] private static extern u16 set_optional_connection_data_client_port(u16 ClientPort);
		public u16 ClientPort { get => get_optional_connection_data_client_port(); set => set_optional_connection_data_client_port(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_sent_speech();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_sent_speech(u64 PacketsSentSpeech);
		public u64 PacketsSentSpeech { get => get_optional_connection_data_packets_sent_speech(); set => set_optional_connection_data_packets_sent_speech(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_sent_keepalive();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_sent_keepalive(u64 PacketsSentKeepalive);
		public u64 PacketsSentKeepalive { get => get_optional_connection_data_packets_sent_keepalive(); set => set_optional_connection_data_packets_sent_keepalive(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_sent_control();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_sent_control(u64 PacketsSentControl);
		public u64 PacketsSentControl { get => get_optional_connection_data_packets_sent_control(); set => set_optional_connection_data_packets_sent_control(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_sent_total();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_sent_total(u64 PacketsSentTotal);
		public u64 PacketsSentTotal { get => get_optional_connection_data_packets_sent_total(); set => set_optional_connection_data_packets_sent_total(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_sent_speech();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_sent_speech(u64 BytesSentSpeech);
		public u64 BytesSentSpeech { get => get_optional_connection_data_bytes_sent_speech(); set => set_optional_connection_data_bytes_sent_speech(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_sent_keepalive();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_sent_keepalive(u64 BytesSentKeepalive);
		public u64 BytesSentKeepalive { get => get_optional_connection_data_bytes_sent_keepalive(); set => set_optional_connection_data_bytes_sent_keepalive(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_sent_control();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_sent_control(u64 BytesSentControl);
		public u64 BytesSentControl { get => get_optional_connection_data_bytes_sent_control(); set => set_optional_connection_data_bytes_sent_control(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_sent_total();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_sent_total(u64 BytesSentTotal);
		public u64 BytesSentTotal { get => get_optional_connection_data_bytes_sent_total(); set => set_optional_connection_data_bytes_sent_total(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_received_speech();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_received_speech(u64 PacketsReceivedSpeech);
		public u64 PacketsReceivedSpeech { get => get_optional_connection_data_packets_received_speech(); set => set_optional_connection_data_packets_received_speech(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_received_keepalive();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_received_keepalive(u64 PacketsReceivedKeepalive);
		public u64 PacketsReceivedKeepalive { get => get_optional_connection_data_packets_received_keepalive(); set => set_optional_connection_data_packets_received_keepalive(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_received_control();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_received_control(u64 PacketsReceivedControl);
		public u64 PacketsReceivedControl { get => get_optional_connection_data_packets_received_control(); set => set_optional_connection_data_packets_received_control(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packets_received_total();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packets_received_total(u64 PacketsReceivedTotal);
		public u64 PacketsReceivedTotal { get => get_optional_connection_data_packets_received_total(); set => set_optional_connection_data_packets_received_total(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_received_speech();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_received_speech(u64 BytesReceivedSpeech);
		public u64 BytesReceivedSpeech { get => get_optional_connection_data_bytes_received_speech(); set => set_optional_connection_data_bytes_received_speech(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_received_keepalive();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_received_keepalive(u64 BytesReceivedKeepalive);
		public u64 BytesReceivedKeepalive { get => get_optional_connection_data_bytes_received_keepalive(); set => set_optional_connection_data_bytes_received_keepalive(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_received_control();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_received_control(u64 BytesReceivedControl);
		public u64 BytesReceivedControl { get => get_optional_connection_data_bytes_received_control(); set => set_optional_connection_data_bytes_received_control(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_bytes_received_total();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_bytes_received_total(u64 BytesReceivedTotal);
		public u64 BytesReceivedTotal { get => get_optional_connection_data_bytes_received_total(); set => set_optional_connection_data_bytes_received_total(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packetloss_speech();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packetloss_speech(u64 PacketlossSpeech);
		public u64 PacketlossSpeech { get => get_optional_connection_data_packetloss_speech(); set => set_optional_connection_data_packetloss_speech(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packetloss_keepalive();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packetloss_keepalive(u64 PacketlossKeepalive);
		public u64 PacketlossKeepalive { get => get_optional_connection_data_packetloss_keepalive(); set => set_optional_connection_data_packetloss_keepalive(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packetloss_control();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packetloss_control(u64 PacketlossControl);
		public u64 PacketlossControl { get => get_optional_connection_data_packetloss_control(); set => set_optional_connection_data_packetloss_control(value); }
		[DllImport("tslib")] private static extern u64 get_optional_connection_data_packetloss_total();
		[DllImport("tslib")] private static extern u64 set_optional_connection_data_packetloss_total(u64 PacketlossTotal);
		public u64 PacketlossTotal { get => get_optional_connection_data_packetloss_total(); set => set_optional_connection_data_packetloss_total(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_month_bytes_uploaded();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_month_bytes_uploaded(i32 MonthBytesUploaded);
		public i32 MonthBytesUploaded { get => get_optional_connection_data_month_bytes_uploaded(); set => set_optional_connection_data_month_bytes_uploaded(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_month_bytes_downloaded();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_month_bytes_downloaded(i32 MonthBytesDownloaded);
		public i32 MonthBytesDownloaded { get => get_optional_connection_data_month_bytes_downloaded(); set => set_optional_connection_data_month_bytes_downloaded(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_total_bytes_uploaded();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_total_bytes_uploaded(i32 TotalBytesUploaded);
		public i32 TotalBytesUploaded { get => get_optional_connection_data_total_bytes_uploaded(); set => set_optional_connection_data_total_bytes_uploaded(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_total_bytes_downloaded();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_total_bytes_downloaded(i32 TotalBytesDownloaded);
		public i32 TotalBytesDownloaded { get => get_optional_connection_data_total_bytes_downloaded(); set => set_optional_connection_data_total_bytes_downloaded(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_default_channel_password();
		[DllImport("tslib")] private static extern str set_optional_connection_data_default_channel_password(str DefaultChannelPassword);
		public str DefaultChannelPassword { get => get_optional_connection_data_default_channel_password(); set => set_optional_connection_data_default_channel_password(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_server_password();
		[DllImport("tslib")] private static extern str set_optional_connection_data_server_password(str ServerPassword);
		public str ServerPassword { get => get_optional_connection_data_server_password(); set => set_optional_connection_data_server_password(value); }
		[DllImport("tslib")] private static extern bool get_optional_connection_data_is_muted();
		[DllImport("tslib")] private static extern bool set_optional_connection_data_is_muted(bool IsMuted);
		public bool IsMuted { get => get_optional_connection_data_is_muted(); set => set_optional_connection_data_is_muted(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_volume_modificator();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_volume_modificator(i32 VolumeModificator);
		public i32 VolumeModificator { get => get_optional_connection_data_volume_modificator(); set => set_optional_connection_data_volume_modificator(value); }
		[DllImport("tslib")] private static extern bool get_optional_connection_data_version_sign();
		[DllImport("tslib")] private static extern bool set_optional_connection_data_version_sign(bool VersionSign);
		public bool VersionSign { get => get_optional_connection_data_version_sign(); set => set_optional_connection_data_version_sign(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_avatar();
		[DllImport("tslib")] private static extern str set_optional_connection_data_avatar(str Avatar);
		///<summary>str??? FlagAvatar</summary>
		public str Avatar { get => get_optional_connection_data_avatar(); set => set_optional_connection_data_avatar(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_description();
		[DllImport("tslib")] private static extern str set_optional_connection_data_description(str Description);
		public str Description { get => get_optional_connection_data_description(); set => set_optional_connection_data_description(value); }
		[DllImport("tslib")] private static extern bool get_optional_connection_data_talker();
		[DllImport("tslib")] private static extern bool set_optional_connection_data_talker(bool Talker);
		///<summary>bool??? IsTalker</summary>
		public bool Talker { get => get_optional_connection_data_talker(); set => set_optional_connection_data_talker(value); }
		[DllImport("tslib")] private static extern bool get_optional_connection_data_priority_speaker();
		[DllImport("tslib")] private static extern bool set_optional_connection_data_priority_speaker(bool PrioritySpeaker);
		///<summary>bool??? IsPrioritySpeaker</summary>
		public bool PrioritySpeaker { get => get_optional_connection_data_priority_speaker(); set => set_optional_connection_data_priority_speaker(value); }
		[DllImport("tslib")] private static extern bool get_optional_connection_data_unread_messages();
		[DllImport("tslib")] private static extern bool set_optional_connection_data_unread_messages(bool UnreadMessages);
		public bool UnreadMessages { get => get_optional_connection_data_unread_messages(); set => set_optional_connection_data_unread_messages(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_needed_serverquery_view_power();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_needed_serverquery_view_power(i32 NeededServerqueryViewPower);
		public i32 NeededServerqueryViewPower { get => get_optional_connection_data_needed_serverquery_view_power(); set => set_optional_connection_data_needed_serverquery_view_power(value); }
		[DllImport("tslib")] private static extern i32 get_optional_connection_data_icon_id();
		[DllImport("tslib")] private static extern i32 set_optional_connection_data_icon_id(i32 IconId);
		public i32 IconId { get => get_optional_connection_data_icon_id(); set => set_optional_connection_data_icon_id(value); }
		[DllImport("tslib")] private static extern bool get_optional_connection_data_is_channel_commander();
		[DllImport("tslib")] private static extern bool set_optional_connection_data_is_channel_commander(bool IsChannelCommander);
		public bool IsChannelCommander { get => get_optional_connection_data_is_channel_commander(); set => set_optional_connection_data_is_channel_commander(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_country();
		[DllImport("tslib")] private static extern str set_optional_connection_data_country(str Country);
		public str Country { get => get_optional_connection_data_country(); set => set_optional_connection_data_country(value); }
		[DllImport("tslib")] private static extern str get_optional_connection_data_badges();
		[DllImport("tslib")] private static extern str set_optional_connection_data_badges(str Badges);
		public str Badges { get => get_optional_connection_data_badges(); set => set_optional_connection_data_badges(value); }
	}

	public sealed class Connection
	{
		public Connection(ConnectionId ConnectionId)
		{
			this.ConnectionId = this.ConnectionId;
		}
		public ConnectionId ConnectionId { get; }

		[DllImport("tslib")] private static extern ServerId get_connection_server_id(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern ServerId set_connection_server_id(ConnectionId ConnectionId, ServerId ServerId);
		public ServerId ServerId { get => get_connection_server_id(ConnectionId); set => set_connection_server_id(ConnectionId, value); }
		[DllImport("tslib")] private static extern ChannelId get_connection_channel_id(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern ChannelId set_connection_channel_id(ConnectionId ConnectionId, ChannelId ChannelId);
		public ChannelId ChannelId { get => get_connection_channel_id(ConnectionId); set => set_connection_channel_id(ConnectionId, value); }
		[DllImport("tslib")] private static extern str get_connection_uid(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern str set_connection_uid(ConnectionId ConnectionId, str Uid);
		///<summary>UniqueIdentifier</summary>
		public str Uid { get => get_connection_uid(ConnectionId); set => set_connection_uid(ConnectionId, value); }
		[DllImport("tslib")] private static extern str get_connection_name(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern str set_connection_name(ConnectionId ConnectionId, str Name);
		///<summary>Nickname</summary>
		public str Name { get => get_connection_name(ConnectionId); set => set_connection_name(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_talking(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_talking(ConnectionId ConnectionId, bool Talking);
		///<summary>??? FlagTalking</summary>
		public bool Talking { get => get_connection_talking(ConnectionId); set => set_connection_talking(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_whispering(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_whispering(ConnectionId ConnectionId, bool Whispering);
		public bool Whispering { get => get_connection_whispering(ConnectionId); set => set_connection_whispering(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_away(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_away(ConnectionId ConnectionId, bool Away);
		///<summary>AwayStatus???</summary>
		public bool Away { get => get_connection_away(ConnectionId); set => set_connection_away(ConnectionId, value); }
		[DllImport("tslib")] private static extern str get_connection_away_message(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern str set_connection_away_message(ConnectionId ConnectionId, str AwayMessage);
		public str AwayMessage { get => get_connection_away_message(ConnectionId); set => set_connection_away_message(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_input_muted(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_input_muted(ConnectionId ConnectionId, bool InputMuted);
		///<summary>MuteInputStatus???</summary>
		public bool InputMuted { get => get_connection_input_muted(ConnectionId); set => set_connection_input_muted(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_output_muted(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_output_muted(ConnectionId ConnectionId, bool OutputMuted);
		///<summary>MuteOutputStatus???</summary>
		public bool OutputMuted { get => get_connection_output_muted(ConnectionId); set => set_connection_output_muted(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_output_only_muted(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_output_only_muted(ConnectionId ConnectionId, bool OutputOnlyMuted);
		///<summary>MuteOutputStatus???</summary>
		public bool OutputOnlyMuted { get => get_connection_output_only_muted(ConnectionId); set => set_connection_output_only_muted(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_input_hardware(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_input_hardware(ConnectionId ConnectionId, bool InputHardware);
		///<summary>HardwareInputStatus???</summary>
		public bool InputHardware { get => get_connection_input_hardware(ConnectionId); set => set_connection_input_hardware(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_output_hardware(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_output_hardware(ConnectionId ConnectionId, bool OutputHardware);
		///<summary>HardwareOutputStatus???</summary>
		public bool OutputHardware { get => get_connection_output_hardware(ConnectionId); set => set_connection_output_hardware(ConnectionId, value); }
		[DllImport("tslib")] private static extern str get_connection_phonetic_name(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern str set_connection_phonetic_name(ConnectionId ConnectionId, str PhoneticName);
		///<summary>NicknamePhonetic</summary>
		public str PhoneticName { get => get_connection_phonetic_name(ConnectionId); set => set_connection_phonetic_name(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_recording(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_recording(ConnectionId ConnectionId, bool Recording);
		///<summary>bool??? IsRecording</summary>
		public bool Recording { get => get_connection_recording(ConnectionId); set => set_connection_recording(ConnectionId, value); }
		[DllImport("tslib")] private static extern u64 get_connection_database_id(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern u64 set_connection_database_id(ConnectionId ConnectionId, u64 DatabaseId);
		public u64 DatabaseId { get => get_connection_database_id(ConnectionId); set => set_connection_database_id(ConnectionId, value); }
		[DllImport("tslib")] private static extern ulong get_connection_channel_group_id(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern ulong set_connection_channel_group_id(ConnectionId ConnectionId, ulong ChannelGroupId);
		///<summary>???</summary>
		public ulong ChannelGroupId { get => get_connection_channel_group_id(ConnectionId); set => set_connection_channel_group_id(ConnectionId, value); }
		[DllImport("tslib")] private static extern u64 get_connection_server_groups(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern u64 set_connection_server_groups(ConnectionId ConnectionId, u64 ServerGroups);
		public u64 ServerGroups { get => get_connection_server_groups(ConnectionId); set => set_connection_server_groups(ConnectionId, value); }
		[DllImport("tslib")] private static extern i32 get_connection_talk_power(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern i32 set_connection_talk_power(ConnectionId ConnectionId, i32 TalkPower);
		public i32 TalkPower { get => get_connection_talk_power(ConnectionId); set => set_connection_talk_power(ConnectionId, value); }
		[DllImport("tslib")] private static extern bool get_connection_talk_request(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern bool set_connection_talk_request(ConnectionId ConnectionId, bool TalkRequest);
		///<summary>???</summary>
		public bool TalkRequest { get => get_connection_talk_request(ConnectionId); set => set_connection_talk_request(ConnectionId, value); }
		[DllImport("tslib")] private static extern str get_connection_talk_request_message(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern str set_connection_talk_request_message(ConnectionId ConnectionId, str TalkRequestMessage);
		///<summary>??? TalkRequestMsg</summary>
		public str TalkRequestMessage { get => get_connection_talk_request_message(ConnectionId); set => set_connection_talk_request_message(ConnectionId, value); }
		[DllImport("tslib")] private static extern ChannelId get_connection_channel_group_inherited_channel_id(ConnectionId ConnectionId);
		[DllImport("tslib")] private static extern ChannelId set_connection_channel_group_inherited_channel_id(ConnectionId ConnectionId, ChannelId ChannelGroupInheritedChannelId);
		public ChannelId ChannelGroupInheritedChannelId { get => get_connection_channel_group_inherited_channel_id(ConnectionId); set => set_connection_channel_group_inherited_channel_id(ConnectionId, value); }
	}


}

#pragma warning restore IDE1006

